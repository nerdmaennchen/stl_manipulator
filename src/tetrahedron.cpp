#include "tetrahedron.h"

#include <numeric>


Tetrahedron::Tetrahedron(std::array<arma::colvec3, 3> const& v) {
    com = std::accumulate(begin(v), end(v), arma::colvec3{}) / 4;
    auto normal = arma::cross(v[1]-v[0], v[2]-v[0]);

    const double det = arma::dot(v[0], arma::cross(v[1], v[2]));
    volume = det / 6.;

    const double a = (v[0](1)*v[0](1) + v[1](1)*v[1](1) + v[2](1)*v[2](1) + 
                      v[0](1)*v[1](1) + v[0](1)*v[2](1) + v[1](1)*v[2](1) +

                      v[0](2)*v[0](2) + v[1](2)*v[1](2) + v[2](2)*v[2](2) + 
                      v[0](2)*v[1](2) + v[0](2)*v[2](2) + v[1](2)*v[2](2)) /
                      60.;

    const double b = (v[0](0)*v[0](0) + v[1](0)*v[1](0) + v[2](0)*v[2](0) + 
                      v[0](0)*v[1](0) + v[0](0)*v[2](0) + v[1](0)*v[2](0) +

                      v[0](2)*v[0](2) + v[1](2)*v[1](2) + v[2](2)*v[2](2) + 
                      v[0](2)*v[1](2) + v[0](2)*v[2](2) + v[1](2)*v[2](2)) /
                      60.;

    const double c = (v[0](0)*v[0](0) + v[1](0)*v[1](0) + v[2](0)*v[2](0) + 
                      v[0](0)*v[1](0) + v[0](0)*v[2](0) + v[1](0)*v[2](0) +

                      v[0](1)*v[0](1) + v[1](1)*v[1](1) + v[2](1)*v[2](1) + 
                      v[0](1)*v[1](1) + v[0](1)*v[2](1) + v[1](1)*v[2](1)) / 
                      60.;



    const double a_ = (2*(v[0](1)*v[0](2) + v[1](1)*v[1](2) + v[2](1)*v[2](2)) + 
                       v[1](1)*v[0](2) + v[2](1)*v[0](2) + v[0](1)*v[1](2) + 
                       v[2](1)*v[1](2) + v[0](1)*v[2](2) + v[1](1)*v[2](2)) /
                       120.;

    const double b_ = (2*(v[0](0)*v[0](2) + v[1](0)*v[1](2) + v[2](0)*v[2](2)) + 
                       v[1](0)*v[0](2) + v[2](0)*v[0](2) + v[0](0)*v[1](2) + 
                       v[2](0)*v[1](2) + v[0](0)*v[2](2) + v[1](0)*v[2](2)) / 
                       120.;

    const double c_ = (2*(v[0](0)*v[0](1) + v[1](0)*v[1](1) + v[2](0)*v[2](1)) + 
                       v[1](0)*v[0](1) + v[2](0)*v[0](1) + v[0](0)*v[1](1) + 
                       v[2](0)*v[1](1) + v[0](0)*v[2](1) + v[1](0)*v[2](1)) /
                       120.;

    normed_inertia_tensor = {
        {a, -b_, -c_},
        {-b_, b, -a_},
        {-c_, -a_, c}
    };
    normed_inertia_tensor *= det;
}